# Script PowerShell pour ex√©cuter tous les tests unitaires du projet FoodSave
# Suit les directives strictes pour le d√©veloppement Dart

Write-Host "üß™ Ex√©cution des tests unitaires FoodSave App" -ForegroundColor Blue
Write-Host "==============================================" -ForegroundColor Blue

# Fonction pour afficher les messages color√©s
function Write-Status {
    param([string]$Message)
    Write-Host "[INFO] $Message" -ForegroundColor Blue
}

function Write-Success {
    param([string]$Message)
    Write-Host "[SUCCESS] $Message" -ForegroundColor Green
}

function Write-Warning {
    param([string]$Message)
    Write-Host "[WARNING] $Message" -ForegroundColor Yellow
}

function Write-Error {
    param([string]$Message)
    Write-Host "[ERROR] $Message" -ForegroundColor Red
}

# V√©rifier que Flutter est install√©
try {
    $flutterVersion = flutter --version 2>$null
    if ($LASTEXITCODE -ne 0) {
        throw "Flutter non trouv√©"
    }
} catch {
    Write-Error "Flutter n'est pas install√© ou n'est pas dans le PATH"
    exit 1
}

# V√©rifier que nous sommes dans le bon r√©pertoire
if (-not (Test-Path "pubspec.yaml")) {
    Write-Error "Ce script doit √™tre ex√©cut√© depuis la racine du projet"
    exit 1
}

Write-Status "V√©rification de l'environnement Flutter..."
flutter doctor --version

# Nettoyer le projet
Write-Status "Nettoyage du projet..."
flutter clean

# R√©cup√©rer les d√©pendances
Write-Status "R√©cup√©ration des d√©pendances..."
flutter pub get

# Analyser le code
Write-Status "Analyse du code..."
flutter analyze

if ($LASTEXITCODE -ne 0) {
    Write-Warning "Des probl√®mes d'analyse ont √©t√© d√©tect√©s"
}

# Ex√©cuter les tests unitaires
Write-Status "Ex√©cution des tests unitaires..."
Write-Host ""

# Tests avec couverture
Write-Status "Ex√©cution des tests avec couverture de code..."
flutter test --coverage

if ($LASTEXITCODE -eq 0) {
    Write-Success "Tous les tests sont pass√©s avec succ√®s !"
} else {
    Write-Error "Certains tests ont √©chou√©"
    exit 1
}

# V√©rifier si le fichier de couverture existe
if (Test-Path "coverage/lcov.info") {
    Write-Status "Fichier de couverture g√©n√©r√©: coverage/lcov.info"
    Write-Status "Pour visualiser la couverture, vous pouvez utiliser un outil comme lcov ou un service en ligne"
} else {
    Write-Warning "Fichier de couverture non trouv√©"
}

# R√©sum√© des tests
Write-Host ""
Write-Host "üìä R√©sum√© des tests unitaires" -ForegroundColor Blue
Write-Host "=============================" -ForegroundColor Blue

# Compter les fichiers de test
$testFiles = Get-ChildItem -Path "test" -Filter "*_test.dart" -Recurse
Write-Status "Fichiers de test trouv√©s: $($testFiles.Count)"

# Lister les fichiers de test
Write-Host ""
Write-Status "Fichiers de test:"
foreach ($file in $testFiles) {
    Write-Host "  - $($file.FullName.Replace((Get-Location).Path + '\', ''))"
}

Write-Host ""
Write-Success "Ex√©cution des tests termin√©e !"
Write-Status "Pour ex√©cuter des tests sp√©cifiques:"
Write-Status "  flutter test test/unit/models/map_marker_test.dart"
Write-Status "  flutter test test/unit/domain/entities/basket_test.dart"
Write-Status "  flutter test test/unit/services/demo_map_service_test.dart"

Write-Host ""
Write-Status "Pour ex√©cuter les tests en mode verbose:"
Write-Status "  flutter test --verbose"

Write-Host ""
Write-Status "Pour ex√©cuter les tests avec un pattern sp√©cifique:"
Write-Status "  flutter test --name 'devrait calculer correctement'"

Write-Host ""
Write-Status "Structure des tests cr√©√©e:"
Write-Host "  ‚úÖ Mod√®les et Entit√©s (5 fichiers)"
Write-Host "  ‚úÖ Services (1 fichier)"
Write-Host "  ‚úÖ Cas d'usage (2 fichiers)"
Write-Host "  ‚úÖ Repositories (1 fichier)"
Write-Host "  ‚úÖ Utilitaires de test (1 fichier)"
Write-Host "  ‚úÖ Documentation compl√®te"

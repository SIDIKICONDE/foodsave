#!/bin/bash

# Script pour ex√©cuter tous les tests unitaires du projet FoodSave
# Suit les directives strictes pour le d√©veloppement Dart

echo "üß™ Ex√©cution des tests unitaires FoodSave App"
echo "=============================================="

# Couleurs pour l'affichage
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fonction pour afficher les messages color√©s
print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# V√©rifier que Flutter est install√©
if ! command -v flutter &> /dev/null; then
    print_error "Flutter n'est pas install√© ou n'est pas dans le PATH"
    exit 1
fi

# V√©rifier que nous sommes dans le bon r√©pertoire
if [ ! -f "pubspec.yaml" ]; then
    print_error "Ce script doit √™tre ex√©cut√© depuis la racine du projet"
    exit 1
fi

print_status "V√©rification de l'environnement Flutter..."
flutter doctor --version

# Nettoyer le projet
print_status "Nettoyage du projet..."
flutter clean

# R√©cup√©rer les d√©pendances
print_status "R√©cup√©ration des d√©pendances..."
flutter pub get

# Analyser le code
print_status "Analyse du code..."
flutter analyze

if [ $? -ne 0 ]; then
    print_warning "Des probl√®mes d'analyse ont √©t√© d√©tect√©s"
fi

# Ex√©cuter les tests unitaires
print_status "Ex√©cution des tests unitaires..."
echo ""

# Tests avec couverture
print_status "Ex√©cution des tests avec couverture de code..."
flutter test --coverage

if [ $? -eq 0 ]; then
    print_success "Tous les tests sont pass√©s avec succ√®s !"
else
    print_error "Certains tests ont √©chou√©"
    exit 1
fi

# G√©n√©rer le rapport de couverture
if [ -f "coverage/lcov.info" ]; then
    print_status "G√©n√©ration du rapport de couverture..."
    
    # Installer lcov si n√©cessaire
    if command -v genhtml &> /dev/null; then
        genhtml coverage/lcov.info -o coverage/html
        print_success "Rapport de couverture g√©n√©r√© dans coverage/html/"
        print_status "Ouvrez coverage/html/index.html dans votre navigateur pour voir le rapport"
    else
        print_warning "genhtml n'est pas install√©. Installez lcov pour g√©n√©rer le rapport HTML"
        print_status "Sur Ubuntu/Debian: sudo apt-get install lcov"
        print_status "Sur macOS: brew install lcov"
    fi
else
    print_warning "Fichier de couverture non trouv√©"
fi

# R√©sum√© des tests
echo ""
echo "üìä R√©sum√© des tests unitaires"
echo "============================="

# Compter les fichiers de test
TEST_FILES=$(find test/ -name "*_test.dart" | wc -l)
print_status "Fichiers de test trouv√©s: $TEST_FILES"

# Lister les fichiers de test
echo ""
print_status "Fichiers de test:"
find test/ -name "*_test.dart" | while read -r file; do
    echo "  - $file"
done

echo ""
print_success "Ex√©cution des tests termin√©e !"
print_status "Pour ex√©cuter des tests sp√©cifiques:"
print_status "  flutter test test/unit/models/map_marker_test.dart"
print_status "  flutter test test/unit/domain/entities/basket_test.dart"
print_status "  flutter test test/unit/services/demo_map_service_test.dart"

echo ""
print_status "Pour ex√©cuter les tests en mode verbose:"
print_status "  flutter test --verbose"

echo ""
print_status "Pour ex√©cuter les tests avec un pattern sp√©cifique:"
print_status "  flutter test --name 'devrait calculer correctement'"
